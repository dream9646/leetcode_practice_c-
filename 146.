typedef struct _hash_st {
    int key;
    int val;
    struct _hash_st *pre;
    struct _hash_st *nxt;
    UT_hash_handle hh;
}hash_st;

//【算法思路】hash+双链表
typedef struct {
    hash_st *head;
    hash_st root;
    int cnt;
    int cap;
} LRUCache;

LRUCache* lRUCacheCreate(int capacity) {
    LRUCache *obj = (LRUCache *)calloc(1, sizeof(LRUCache));
    obj->cap = capacity;
    obj->root.pre = &obj->root;
    obj->root.nxt = &obj->root;

    return obj;
}

int lRUCacheGet(LRUCache* obj, int key) {
    //hash加速查找，并将该节点移到队首
    hash_st *tmph;
    HASH_FIND(hh, obj->head, &key, sizeof(key), tmph);
    if(tmph == NULL) {
        return -1;
    }

    //将tmph从链表中取出，插入队首
    tmph->pre->nxt = tmph->nxt;
    tmph->nxt->pre = tmph->pre;

    tmph->nxt = obj->root.nxt;
    tmph->pre = &obj->root;
    obj->root.nxt->pre = tmph;
    obj->root.nxt = tmph;

    return tmph->val;
}

void lRUCachePut(LRUCache* obj, int key, int value) {
    //检查该数是否存在
    hash_st *tmph;
    HASH_FIND(hh, obj->head, &key, sizeof(key), tmph);
    if(tmph == NULL) {
        tmph = (hash_st *)calloc(1, sizeof(hash_st));
        tmph->key = key;
        tmph->val = value;

        HASH_ADD_KEYPTR(hh, obj->head, &tmph->key, sizeof(tmph->key), tmph);

        obj->cnt++;
    } else {
        tmph->val = value;

        //将该节点摘下
        tmph->pre->nxt = tmph->nxt;
        tmph->nxt->pre = tmph->pre;
    }

    //将该节点放入头部
    tmph->nxt = obj->root.nxt;
    tmph->pre = &obj->root;
    obj->root.nxt->pre = tmph;
    obj->root.nxt = tmph;

    if(obj->cnt <= obj->cap) {
        return;
    }

    //超出容量，删除尾部
    obj->cnt--;
    hash_st *tail = obj->root.pre;
    tail->pre->nxt = tail->nxt;
    tail->nxt->pre = tail->pre;

    HASH_DEL(obj->head, tail);
}

void lRUCacheFree(LRUCache* obj) {
    free(obj);
}

/**
 * Your LRUCache struct will be instantiated and called as such:
 * LRUCache* obj = lRUCacheCreate(capacity);
 * int param_1 = lRUCacheGet(obj, key);
 
 * lRUCachePut(obj, key, value);
 
 * lRUCacheFree(obj);
*/

作者：wolly
链接：https://leetcode-cn.com/problems/lru-cache/solution/shi-yong-hashshuang-lian-biao-jie-jue-146-lruhuan-/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
