/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
/*char ** reorderLogFiles(char ** logs, int logsSize, int* returnSize){

}*/

/**
*
*整体思路：自定义快速排序的比较函数
*1.直接调用相应的快速排序函数，默认是从小到大排序；
*2.首先直接移动字符串s1和字符串s2到' '处，再开始比较；
*3.如果s1和s2内容全为数字，直接return 0，不改变他们的顺序；
*4.如果s1和s2内容全为字母，直接返回他们的比较值，注意如果他们内容完全一致，再移动到前面去比较标识符；
*5.如果s1为字母日志，s2为数字日志，字母在前面，字母是小的，则直接返回-1；
*6.如果s1为数字日志，s2为字母日志，数字在前面，数字是大的，则直接返回1。
*
*/

/*
    printf("strcmp = %d\r\n", strcmp(" ", "a"));-1
    printf("strcmp = %d\r\n", strcmp(" ", "1"));-1
    printf("strcmp = %d\r\n", strcmp("\0", "a"));-1
    printf("strcmp = %d\r\n", strcmp("\0", "1"));-1
    printf("strcmp = %d\r\n", strcmp("1", "a"));-1
*/


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

/* 优化整理后代码： */
int cmp(const void* a, const void* b)
{
    int iRet = 0;
    int i = 0;
    int j = 0;

    /* 注意：强制数据类型转换 */
    char* s1 = *((char**)(void*)a);
    char* s2 = *((char**)(void*)b);
    
    /* 检查函数入参 */
    if((NULL == s1) || (NULL == s2))
    {
        return iRet;
    }

    /* 跳过标识符 */
    //while(' ' != *(s1 + i))
    while(' ' != s1[i])
    {
        i++;
    }
    //while(' ' != *(s2 + j))
    while(' ' != s2[j])
    {
        j++;
    }
    /* 跳过标识符后的空格 */
    i++;
    j++;

    if((('0' <= s1[i]) && ('9' >= s1[i])) && (('0' <= s2[j]) && ('9' >= s2[j])))     
    {
        /* s1和s2都为数字日志 */

        /* 不改变他们的顺便，保留两者原来的相对顺序 */
        iRet = 0;
    }
    else if((('a' <= s1[i]) && ('z' >= s1[i])) && (('a' <= s2[j]) && ('z' >= s2[j])))     
    {
        /* s1和s2都为字母日志 */

        /* 跳过标识符及空格后，按内容的字母顺序排序 */
        while(('\0' != s1[i]) && ('\0' != s2[j]) && (s1[i] == s2[j]))
        {
            i++;
            j++;
        }

        /* 内容相同时，在按标识符的顺序排序 */
        //if((i == j) && (s1[i] == s2[j])) //["dig1 8 1 5 1","let123 art","let12 art","let1 art"] 这有个bug就是内容相等时，i和j不一定相等。
        if(s1[i] == s2[j])
        {
            i = 0;
            j = 0;
            while((' ' != s1[i]) && (' ' != s2[j]) && (s1[i] == s2[j]))
            {
                i++;
                j++;
            }
        }

        iRet = s1[i] - s2[j];

        /*iRet = strcmp(&s1[i], &s2[j]);
        if(0 == iRet)
        {
            i = 0;
            j = 0;
            iRet = strcmp(&s1[i], &s2[j]);
        }*/
    }
    else if((('a' <= s1[i]) && ('z' >= s1[i])) && (('0' <= s2[j]) && ('9' >= s2[j])))     
    {
        /* s1为字母日志，s2为数字日志 */
        iRet = -1;

    }
    else if((('0' <= s1[i]) && ('9' >= s1[i])) && (('a' <= s2[j]) && ('z' >= s2[j])))     
    {
        /* s1为数字日志，s2为字母日志 */
        iRet = 1;
    }

    return iRet;
}

char ** reorderLogFiles(char ** logs, int logsSize, int* returnSize){
    *returnSize = logsSize;

    qsort(logs, logsSize, sizeof(*logs), cmp);
    //printf("width0=%d width1=%d", sizeof( *( logs + 0) ), sizeof( *( logs + 1) ));

    return logs;
}



作者：hebutwlw
链接：https://leetcode-cn.com/problems/reorder-data-in-log-files/solution/937-zhong-xin-pai-lie-ri-zhi-wen-jian-cy-vsim/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
